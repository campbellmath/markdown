#!/usr/bin/env node

// https://highlightjs.org/
var hljs = require('highlight.js');

// full options list (defaults)
var md = require('markdown-it')({
    html:         true,        // Enable HTML tags in source
    xhtmlOut:     false,        // Use '/' to close single tags (<br />).
    // This is only for full CommonMark compatibility.
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks. Can be
    // useful for external highlighters.
    linkify:      true,        // Autoconvert URL-like text to links

    // Enable some language-neutral replacement + quotes beautification
    // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '“”‘’',

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externally.
    // If result starts with <pre... internal wrapper is skipped.

    highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
            try {
                return hljs.highlight(str, { language: lang }).value;
            } catch (__) {}
        }

        return ''; // use external default escaping
    }
}).use(require("markdown-it-sup"))
  .use(require("markdown-it-sub"))
  .use(require('markdown-it-footnote'))
  .use(require('markdown-it-emoji'))
  .use(require('markdown-it-task-lists'))
  .use(require('markdown-it-collapsible'))
  .use(require("markdown-it-anchor").default)
  .use(require("markdown-it-table-of-contents"));

const myArgs = process.argv.slice(2);
let md_file = myArgs[0]
let fs = require('fs');

function generate_html(markdown_content) {
    let html='';
    html+='<!DOCTYPE html>';
    html+='<html>';
    html+='    <head>';
    html+='        <meta charset="UTF-8" />';
    html+='        <meta name="viewport" content="width=device-width" />';
    html+='<link rel="stylesheet"';
    html+='      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/default.min.css">';
    html+='<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js"></script>';
    html+='<script src="https://cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js"></script>';
    html+='<script>hljs.highlightAll();hljs.initHighlightingOnLoad();hljs.initLineNumbersOnLoad();</script>';
    html+="<style>";
    html+="td.hljs-ln-numbers {";
    html+="    -webkit-touch-callout: none;";
    html+="    -webkit-user-select: none;";
    html+="    -khtml-user-select: none;";
    html+="    -moz-user-select: none;";
    html+="    -ms-user-select: none;";
    html+="    user-select: none;";
    html+="    text-align: right;";
    html+="    color: #0cr;";
    html+="    border-right: 2px solid #0C0;";
    html+="    vertical-align: top;";
    html+="    padding-right: 5px;";
    html+="}";
    html+="/* for block of code */";
    html+="td.hljs-ln-code {";
    html+="    padding-left: 5px;";
    html+="}";
    html+="</style>";
    html+='        <title>Index</title>';
    html+='    </head>';
    html+='    <body>';
    html+=markdown_content;
    html+='    </body>';
    html+='</html>';
    console.log(html);
}

fs.readFile(md_file, function (err, data) {
    if (err) {
        throw err;
    }
    generate_html(md.render(data.toString()));
});
